## Forms API

snippet checkbox
	$form['${1:/* form element */}'] = array(
		'#type' => 'checkbox', 
		'#title' => t('${2:/* title */}'),
		'#description' => t('${3:/* description */}'),
	);

snippet checkboxes
	$form['${1:/* form element */}'] = array(
		'#type' => 'checkboxes', 
		'#title' => t('${2:/* title */}'),
		'#description' => t('${3:/* description */}'),
		'#options' => array(
			'${4:/* key */}' => t('${5:/* value */}'),
		);
	);

snippet file
	$form['${1:/* form element */}'] = array(
		'#type' => 'file', 
		'#title' => t('${2:/* title */}'), 
		'#description' => t('${3:/* description */}'),
	);

snippet select
	$form['${1:/* form element */}'] = array(
		'#type' => 'select',
		'#title' => t('${2:/* title */}'),
		'#description' => t('${3:/* description */}'),
		'#options' => array(
			'${4:/* key */}' => t('${5:/* value */}'),
		),
	);

snippet submit
	$form['${1:/* form element */}'] = array(
		'#type' => 'submit',
		'#value' => t('${2:/* value */}'),
	);

snippet textarea
	$form['${1:/* form element */}'] = array(
		'#type' => 'textarea', 
		'#title' => t('${2:/* title */}'), 
		'#rows' => ${3:/* default:5 */},
	);

snippet textfield
	$form['${1:/* form element */}'] = array(
		'#type' => 'textfield', 
		'#title' => t('${2:/* title */}'), 
		'#size' => ${3:/* default:60 */},
	);

## drupal_ functions

snippet drupal_get_form
	drupal_get_form('${1:/* Form ID */}', $${2:argument});

snippet drupal_get_path
	drupal_get_path('${1:/* Type: module, theme or theme_engine */}', '${2:/* Name */}');

snippet drupal_get_path_alias
	drupal_get_path_alias('node/${1:nid}', ${2:language (optional)});

# Shortcut for drupal_set_message
snippet dsm
	drupal_set_message('${1:message}.', '${2:status, warning, or error}', ${3:repeat (default:TRUE)});

## Hooks

snippet hook_cron
	
	/**
	 * Implementation of hook_cron()
	 */
	function `Filename()`_cron() {
		${1:// Your code here.}
	}
	

snippet hook_form_alter
	
	/**
	 * Implementation of hook_form_alter()
	 */
	function `Filename()`_form_alter(&$form, $form_state, $form_id) {
		switch ($form_id) {
			case '${1:/* your form */}':
			  ${2:// your code.}
		}
	}
	

snippet hook_help
	
	/**
	 * Implementation of hook_help
	 */
	function `Filename()`_help($path, $arg) {
		switch ($path) {
			case '${1:/* path */}':
				// Enter your help text below
				return t('${2:/* text */}');
		}
	}
	

snippet hook_init
	/**
	 * Implementation of hook_init().
	 */
	function `Filename()`_init() {
		${1:/* your code here */}
	}

snippet hook_mail_alter
	
	/**
	 * Implementation of hook_mail_alter()
	 */
	function `Filename()`_mail_alter(&$message) {
		${1:// Your code here.}
	}
	

snippet hook_menu
	/**
	 * Implementation of hook_menu()
	 */
	function `Filename()`_menu() {
		$${1:items} = array();
		
		// Put your menu items here.
		$$1['${2:path}'] = array(
			'title' => '${3:title}', 
			'page callback' => '${4:page_callback}', 
			'access arguments' => array('${5:permission}'), 
			'type' => ${6:MENU_SUGGESTED_ITEM},
		);
		
		return $$1;
	}
	

snippet hook_menu_alter
	
	/**
	 * Implementation of hook_menu_alter().
	 */
	function `Filename()`_menu_alter(&$${1:items}) {
		$$1['${2:/* your code here */}']
	}
	

snippet hook_node_info
	
	/**
	 * Implementation of hook_node_info().
	 */
	function `Filename()`_node_info() {
		return array(
			'${1:/* machine-readable name */}' => array(
				'name' => t('${2:/* human-readable name */}'),
				'module' => '`Filename()`',
				'description' => t('${3:/* description */}'),
			),
		);
	}
	

snippet hook_node_operations
	
	/**
	 * Implementation of hook_node_operations()
	 */
	function `Filename()`_node_operations() {
		$operations = array(
		  '${1:/* operation */}' => array(
		    'label' => t('${2:/* label */}'),
		    'callback' => '${3:/* callback */}',
		  ),
		);
		return $operations;
	}
	
	/**
	 * Callback function
	 */
	function $3 {
		${4:// Your code here.}
	}
	

snippet hook_theme
	
	/**
	 * Implementation of hook_theme()
	 */
	function `Filename()`_theme($existing, $type, $theme, $path) {
		return array(
			'${1:theme_function}' => array(
				'arguments' => array(${2:/* Theme function arguments */}),
				${3:/* See for options */}
			),
		);
	}
	

snippet hook_user_operations
	
	/**
	 * Implementation of hook_user_operations()
	 */
	
	function `Filename()`_user_operations() {
		$operations = array(
			'${1:/* operation */}' => array(
				'label' => t('${2:/* label */}'),
				'callback' => '${3:/* callback */}',
			),
		);
		return $operations;
	}
	
	/**
	 * Callback function
	 */
	function $3 {
		${4:// Your code here.}
	}
	

## Everything else

snippet l
	l(${1:/* text */}, ${2:/* link */})

snippet url
	url('${1:path}', array('query' => '${2:query}', 'absolute' => ${3:false}))

snippet watchdog
	watchdog('${1:/* type */}', '${2:/* message */}'${3});

